const fs = require('mz/fs')
const path = require('path')
const root = 'projects'

const readFile = name => {
  return fs.stat(name)
    .then(stat => stat.isDirectory())
    .then(isDir => !isDir && fs.readFile(name, {encoding: 'utf8'}))
    .then(content => ({
      name: path.basename(name),
      content
    }))
}

const onlyDirs = name => {
  return fs.stat(name)
    .then(stat => stat.isDirectory())
}

export default {
  listProjects: Promise.coroutine(function * () {
    const projects = (yield fs.readdir(root))
      .map(project => path.resolve(root, project))
      .filter(onlyDirs)
      .map(project => path.basename(project))
      .map(project => ({title: project}))

    return projects
  }),

  listInlines: Promise.coroutine(function * (projectName) {
    const list = (yield fs.readdir(path.join(root, projectName, 'src')))
      .map(fileName => path.resolve(root, projectName, 'src', fileName))
      .map(readFile)

    return Promise.all(list)
  }),

  uploadInline: Promise.coroutine(function * (projectName, fileName, content) {
    return fs
      .writeFile(path.join(root, projectName, 'src', fileName), content)
      .then(() => `projects/${projectName}/src/${fileName}`)
  })
}
