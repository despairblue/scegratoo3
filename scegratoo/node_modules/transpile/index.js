const resolve = require('path').resolve
const assert = require('assert')
const send = require('koa-send')
const babel = Promise.promisifyAll(require('babel'))

export default (options, babelOptions) => {
  assert(options.root, 'root directory is required to serve files')

  // XXX: needs ignore options, or a root folder for files to compile or a regex for the file extension
  // anything that prevents it from compiling lodash or jquery
  options.root = resolve(options.root)

  const readReadable = (readable, path) => {
    return new Promise((resolve, reject) => {
      let content = ''

      readable.setEncoding('utf8')
      readable.on('data', data => content += data)
      readable.on('error', reject)
      readable.on('end', () => resolve(babel.transform(content, Object.assign(babelOptions, {sourceFileName: path})).code))
    })
  }

  return function * transpile (next) {
    if (this.method === 'HEAD' || this.method === 'GET') {
      const path = yield send(this, this.path, options)

      if (path && !path.includes('bower_components')) {
        if (this.type === 'application/javascript') {
          this.body = yield readReadable(this.body, path)
        }
        return
      }
    }
    yield next
  }
}
